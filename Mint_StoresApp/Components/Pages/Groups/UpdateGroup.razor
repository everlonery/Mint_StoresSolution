@page "/update-group"
@inject NavigationManager NavigationManager
@using Mint_StoresApp.DataControllers
@using Mint_StoresApp.Models
@rendermode InteractiveServer
<PageTitle>Update group</PageTitle>
<h3>Оновити податкову групу</h3>
<hr />
<div class="container">
    <div class="row">
        <div class="col-md-6">
            @if (showSuccessMessage)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <span>Успішно оновлено!</span>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseMessage"></button>
                </div>
            }
            else if (showErrorMessage)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <span>Виникла помилка під час оновлення.</span>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseMessage"></button>
                </div>
            }
            <EditForm Model="@group" OnValidSubmit="Submit">
                <div class="mb-3">
                    <label for="groupName" class="form-label">Назва податкової групи</label>
                    <InputText id="groupName" @bind-Value="group.Name" class="form-control" />
                </div>
                <div class="mb-3">
                    <button type="submit" class="btn btn-success">Змінити</button>
                    <button type="button" class="btn btn-danger" @onclick="Cancel">Скасувати</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .alert-dismissible .btn-close {
        font-size: 0.5rem;
        position: absolute;
        top: 0;
        right: 0;
        padding: 0.5rem 0.5rem;
    }
</style>

@code {

    TaxGroup group = new();
    GroupsController dataController = new();
    bool showSuccessMessage = false;
    bool showErrorMessage = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var uri = new Uri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var json = queryString["json"];

        if (!string.IsNullOrEmpty(json))
        {
            var result = System.Text.Json.JsonSerializer.Deserialize<TaxGroup>(Uri.UnescapeDataString(json));
            if (result != null)
                group = result;
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/groups");
    }

    async Task Submit()
    {
        var result = await dataController.UpdateGroup(group);
        if (result)
            showSuccessMessage = true;
        else
            showErrorMessage = true;
    }

    void CloseMessage()
    {
        showSuccessMessage = false;
        showErrorMessage = false;
    }
}

